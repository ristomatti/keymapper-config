# shellcheck disable=all

@skip-device /(Power Button|Sleep Button|Video Bus|Camera|Microphone)/i
@grab-device "ThinkPad Compact Bluetooth Keyboard with TrackPoint"

# Status bar input mode indicator state dir
STATE_DIR  = ~/.local/state/keymapper/virtual

# Status bar triggered action indicator
EVENT_FIFO = /tmp/keymapper-event

# Debug log file
LOG_FILE   = ~/tmp/keymapper.log

# Gnome keyboard settings
KEY_REPEAT_DELAY    = 250
KEY_REPEAT_INTERVAL = 10


### Utility functions

# Context debug logging
enter     = $(log-info "[$0]" >> LOG_FILE)
leave     = $(log-debug "[$0]" >> LOG_FILE)
context   = 50ms enter["$0"] ^ leave["$0"]

# Misc logging/degugging
log       = $(echo "$0" >> LOG_FILE)
write     = $(printf "$0" >> LOG_FILE)
endWrite  = $(printf "\n" >> LOG_FILE)
trigger   = $(pastel --force-color paint "cb4b16" "[trigger = $0]" >> LOG_FILE)

# For notifications and status bar events
event     = $(echo "$0" >> EVENT_FIFO)
notifyMs  = $(notify-send -t $1 keymapper "$0")
notify    = $(notify-send -t 5000 keymapper "$0")

# Keyboard configuration
setKeyboardLayout     = $(gsettings set org.gnome.desktop.input-sources current "$1")
setKeyRepeatDelay     = $(gsettings set org.gnome.desktop.peripherals.keyboard delay KEY_REPEAT_DELAY)
setKeyRepeatInterval  = $(gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval KEY_REPEAT_INTERVAL)

# Mouse configuration
setScrollButton       = $(sleep 1 && xinput set-prop "pointer:Keymapper" "libinput Button Scrolling Button" 2)
enableScrollButton    = $(sleep 1 && xinput set-prop "pointer:Keymapper" "libinput Scroll Method Enabled" 0, 0, 1)

# On startup actions
applyInputDeviceConfig = setKeyRepeatDelay setKeyRepeatInterval setScrollButton enableScrollButton 

# Lock/unlock modifiers
keyLockOn                  = $(xdotool keydown $0 && touch STATE_DIR/$0Lock)
keyLockOff                 = $(xdotool keyup $0 && rm -f STATE_DIR/$0Lock)
keyLocksOff                = $(xdotool keyup "Control" keyup "Alt" keyup "Shift" && rm -f STATE_DIR/$0Lock)

# Set status bar indicators for virtual modifiers
createStateDir             = $(mkdir -p STATE_DIR)

setAutoShiftStatusOn       = $(touch STATE_DIR/AutoShift)
setAutoShiftStatusOff      = $(rm -f STATE_DIR/AutoShift)

setDirectUmlautsStatusOn   = $(touch STATE_DIR/DirectUmlauts)
setDirectUmlautsStatusOff  = $(rm -f STATE_DIR/DirectUmlauts)

setCapsWordStatusOn        = $(touch STATE_DIR/CapsWord)
setCapsWordStatusOff       = $(rm -f STATE_DIR/CapsWord)


### Alias definitions

# Map Alt to AltLeft similarly as Control and Meta
Alt             = AltLeft

# Intl. layout modifiers
AltGr           = AltRight

# Shorthand aliases only to be used when it helps retaining overall alignment
AltR            = AltRight
CtrlL           = ControlLeft
CtrlR           = ControlRight
Esc             = Escape
ShiftL          = ShiftLeft
ShiftR          = ShiftRight

# Specific modifiers
_Meta           = !ControlLeft !ControlRight           !MetaRight !AltLeft !AltGr MetaLeft
_MetaRight      = !ControlLeft !ControlRight !MetaLeft            !AltLeft !AltGr MetaRight
_Alt            = !ControlLeft !ControlRight !MetaLeft !MetaRight          !AltGr AltLeft
_AltGr          = !ControlLeft !ControlRight !MetaLeft !MetaRight !AltLeft        AltGr
_Control        =              !ControlRight !MetaLeft !MetaRight !AltLeft !AltGr ControlLeft
_ControlRight   = !ControlLeft               !MetaLeft !MetaRight !AltLeft !AltGr ControlRight
_Shift          = !ControlLeft !ControlRight !MetaLeft !MetaRight !AltLeft !AltGr ShiftLeft
_ShiftRight     = !ControlLeft !ControlRight !MetaLeft !MetaRight !AltLeft !AltGr ShiftRight

# Modifier groups
AnyControl      = ControlLeft | ControlRight
AnyAlt          = AltLeft | AltGr
AnyMeta         = MetaLeft | MetaRight
AnyShift        = ShiftLeft | ShiftRight

Modifier        = ControlLeft | ControlRight | MetaLeft | MetaRight | AltLeft | AltRight | ShiftLeft | ShiftRight

# QMK ustom modifiers
Hyper           = (ControlLeft ShiftLeft AltLeft MetaLeft)
Meh             = (ControlLeft ShiftLeft AltLeft)

# QMK key names
Exec            = Open
Search          = BrowserSearch

# Special keys
Erase           = 240
File            = 144
Menu            = Props # Menu in QMK
Search          = 217
Stop            = 128

Back            = 158
Forward         = 159
Bookmarks       = 156
Refresh         = 173

# Logitech G502 X
ButtonSide      = 277

# Key groups
Alpha           = A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
Digit           = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
Symbol          = Backquote | BracketLeft | BracketRight | Comma | Equal | Minus | Period | Semicolon | Slash | Quote
Character       = Alpha | Digit | Symbol | Space | Tab | Enter

NumpadDigit     = Numpad0 | Numpad1 | Numpad2 | Numpad3 | Numpad4 | Numpad5 | Numpad6 | Numpad7 | Numpad8 | Numpad9 
NumpadSymbol    = NumpadDivide | NumpadMultiply | NumpadSubtract | NumpadAdd | NumpadEnter | NumpadDecimal
WhitespaceChar  = Space | Tab | Enter

ArrowKey        = ArrowUp | ArrowDown | ArrowLeft | ArrowRight
NavigationKey   = ArrowKey | Home | End | PageUp | PageDown
FunctionKey     = F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10 | F11 | F12

MouseButton     = ButtonLeft | ButtonRight | ButtonMiddle | ButtonBack | ButtonForward

# Less verbose key release
_  = !Any

# Function key symbols
FnBrightnessDown  = F1
FnBrightnessUp    = F2
FnColorTempDown   = F5
FnColorTempUp     = F6
FnRewind          = F7
FnPlayPause       = F8
FnFastForward     = F9
FnMute            = F10
FnVolumeDown      = F11
FnVolumeUp        = F12

# Navigation layer
NavUp           = Numpad8
NavLeft         = Numpad4
NavDown         = Numpad2
NavRight        = Numpad6

# Directional navigation
KeyUp           = I
KeyLeft         = J
KeyDown         = K
KeyRight        = L
Direction       = KeyUp | KeyLeft | KeyDown | KeyRight

# 3rd level shifted keys for 'ä' and 'ö'
Adiaeresis      = A | Quote
Odiaeresis      = O | Semicolon

# Window manager shortcut keys
Workspace       = Digit | M | P | Equal
ScratchpadBind  = O | S | G | R | X | Y | H | Tab
i3LeaderBind    = O | S | G | R | X | Y | H | V | T | W
i3ModBind       = Workspace | ScratchpadBind | Minus | Enter | Space | Tab | C | F | R | A | Z | W | V

# Extra function key names in X11
# XF86Tools     = F13
# XF86Launch5   = F14 
# XF86Launch6   = F15 
# XF86Launch7   = F16 
# XF86Launch8   = F17 
# XF86Launch9   = F18 

# Special keys used by the window manager
i3Scratchpad    = F13
i3Leader        = F15
SwapKbdLayout   = F16
RofiHassScene   = F17

# Symbolic names for special keys (F13-F24, etc.)
SpaceLeft       = MetaRight
Option          = F18
Command         = F14
Lock            = F19
AudioMicMute    = F20

# Virtual modifiers
CapsWord        = Virtual1
AutoShift       = Virtual2
DirectUmlauts   = Virtual3
ControlLock     = Virtual4
AltLock         = Virtual5
ShiftLock       = Virtual6
MouseScrollLock = Virtual7
NumpadNavMode   = Virtual8
NumpadRofiMode  = Virtual9

AppMod          = Virtual20
SymMod          = Virtual21
OSMod           = Virtual22
NavMod          = Virtual23

VSpace          = Virtual30

BaseLayer       = Virtual100
NavLayer        = Virtual101

# Dummy modifier for disabling context blocks
Never           = Virtual254

# Unmapped abstract action marker
None            = Virtual255

# Device matchers
keyboardintegrated    = /AT Translated Set 2 keyboard|ThinkPad Extra Buttons|Sleep Button|Power Button$/i
KeyboardKeychron      = /Keychron/i
KeyboardK3Pro         = /Keychron K3 Pro/i
KeyboardK15Pro        = /Keychron K15 Pro/i
KeyboardK15ProMedia   = /Keychron K15 Pro Consumer Control$/i
KeyboardK15ProSystem  = /Keychron K15 Pro System Control$/i
KeyboardK15ProMouse   = /Keychron K15 Pro Mouse$/i
KeyboardStandard      = /(Logitech K810 Keyboard)|(ThinkPad Extra Buttons)|(ThinkPad Compact Bluetooth Keyboard with TrackPoint)|(AT Translated Set 2 keyboard)/i
KeyboardThinkPadBT    = /ThinkPad Compact Bluetooth Keyboard with TrackPoint/i

NumpadApayado         = /SINO WEALTH Gaming (KB |KB  Keyboard)$/i

MouseG502X            = /Logitech USB Receiver|G502 X LIGHTSPEED/i
MouseMXAnywhere       = /MX Anywhere 2S Mouse$/i
MouseTrackball        = /Logitech USB Trackball/i
Mouse                 = /Mouse|Logitech USB Receiver|G502/i

MediaWH1000XM3        = "WH-1000XM3 (AVRCP)"
MediaUgreenBTAudio    = "Ugreen-70304E (AVRCP)"
MediaShutterButton    = "PT Selfie Stick"

BarcodeReader         = "OPTO-E Barcode Device"

# Class matchers
UsesFunctionKeys      = /(jetbrains|kitty|tmux|nemo)/i
JetBrainsIDE          = /jetbrains-/i
Chromium              = /chrome|chromium|lights-ui|crx_/i
Terminal              = /kitty|tmux/i
Obsidian              = "obsidian"
Slack                 = "slack"
TeamsForLinux         = "teams-for-linux"
TogglTrack            = /crx_chpiljhfemlfpnfoohpbokdofonkiifm/i
VSCode                = /Code/i

# Key sequences
Combo     = $0 !250ms $1
DoubleTap = $0 !250ms $0{!250ms}

QuickTap  = $0{!125ms}
Tap       = $0{!250ms}

OneShot   = $0 !5000ms

Hold      = $0{200ms}

Repeat2x  = $0 $0
Repeat3x  = $0 $0 $0
Repeat4x  = $0 $0 $0 $0
Repeat5x  = $0 $0 $0 $0 $0
Repeat6x  = $0 $0 $0 $0 $0 $0 


# ------------ STAGE 0 ------------
releaseAfterTimeout = $(keymapperctl --instance $0 --timeout $1 --wait-released $0 --release $0)

[modifier = "VSpace"]
  ContextActive        >> Space releaseAfterTimeout[VSpace, 500]
  Space                >> Space
  Any                  >> VSpace Any

[modifier = "NavLayer"]
  ContextActive        >> context["modifier = NavLayer"]
  KeyUp                >> NavUp
  KeyLeft              >> NavLeft
  KeyDown              >> NavDown
  KeyRight             >> NavRight

[device = KeyboardK15Pro]
  QuickTap[SpaceLeft]  >> Space
  ? Space Space        >> VSpace
  Hold[Space]          >> MetaRight

[device != KeyboardK15Pro]
  ? Space Space        >> VSpace
  Hold[Space]          >> MetaRight
  Hold[Backquote]      >> i3Scratchpad
  Hold[IntlBackslash]  >> NavLayer ^ NavLayer

  Tap[AltRight]        >> i3Leader
  Tap[CapsLock]        >> Escape

  CapsLock             >> ControlRight
  IntlBackslash        >> Backslash


# ------------ STAGE 1 ------------
[stage]

[device != KeyboardKeychron]
  Hold[BracketRight]   >> launch_tmux


# Startup sequence
[default]
  ContextActive >> on_startup
  on_startup    >> createStateDir applyInputDeviceConfig NumpadNavMode


# KeyLock modiiers
[modifier = "ControlLock"]
  ContextActive >> context["modifier = ControlLock"]
  Lock          >> keyLocksOff ^
  Control       >> ControlLock keyLockOff["Control"] ^

[modifier = "ShiftLock"]
  ContextActive >> context["modifier = ShiftLock"]
  Lock          >> keyLocksOff ^
  Shift         >> ShiftLock keyLockOff["Shift"] ^

[modifier = "AltLock"]
  ContextActive >> context["modifier = ShiftLock"]
  Lock          >> keyLocksOff ^
  Alt           >> AltLock keyLockOff["Alt"] ^

[default]
  ContextActive >> context["default, keylock"]

  LockableKey = ControlLeft | Alt | ShiftLeft

  # Lock{Control} >> ControlLock ControlLeft ^
  # Lock{Alt}     >> !Alt AltLock ^
  # Lock{Shift}   >> ShiftLock ^

  ControlLock   >> keyLockOn["Control"] ^ keyLockOff["Control"]
  ShiftLock     >> keyLockOn["Shift"] ^ keyLockOff["Shift"]
  AltLock       >> keyLockOn["Alt"] ^ keyLockOff["Alt"]


# Passthrough modifiers
[default]
  Alt             >> Alt
  ControlLeft     >> ControlLeft
  MetaLeft        >> MetaLeft
  MetaRight       >> MetaRight


# CapsWord modifier (https://docs.qmk.fm/#/feature_caps_word)
[default]
  CapsWordKey = Alpha | Digit | Minus | Backspace

  Shift{200ms}            >> Shift
  (ShiftLeft ShiftRight)  >> CapsWord ^
  ShiftLeft               >> ShiftLeft
  ShiftRight              >> ShiftRight

  CapsWord >> CapsLock setCapsWordStatusOn ^ CapsLock setCapsWordStatusOff

[modifier = "CapsWord"]
  ContextActive >> context["modifier = CapsWord"]
 
  Minus                 >> Shift{Minus} # '_'
  CapsWordKey           >> CapsWordKey
  Any                   >> CapsWord Any ^


# DirectUmlauts modifier
[default]
  DirectUmlautsTitle = /Pull request|Gmail|Outlook|Slack|WhatsApp|TickTick/i

  DirectUmlauts         >> setDirectUmlautsStatusOn ^ setDirectUmlautsStatusOff

[modifier = "!Meta !Control DirectUmlauts", title = DirectUmlautsTitle]
  Shift{Comma}          >> (Shift Semicolon)
  ShiftRight{2}         >> (Shift Quote)

  Quote{130ms}          >> Quote ^
  Semicolon{130ms}      >> Semicolon ^
  AltGr{Quote}          >> !AltGr Quote
  AltGr{Semicolon}      >> !AltGr Semicolon
  Quote                 >> AltGr{Q}
  Semicolon             >> AltGr{P}


# AutoShift modifier (https://docs.qmk.fm/#/feature_auto_shift)
[default]
  AutoShifted = BracketLeft | BracketRight | Minus | Equal | Comma | Period | Semicolon | Slash | Quote

  AutoShift >> setAutoShiftStatusOn ^ setAutoShiftStatusOff

[modifier = "!Meta !AltGr !Control AutoShift"]
  Shift{AutoShifted}                >> (Shift AutoShifted)
  Digit{140ms} !Digit               >> (Shift Digit)
  AutoShifted{120ms} !AutoShifted   >> (Shift AutoShifted)
  AutoShifted{Any}                  >> AutoShifted Any ^
  AutoShifted                       >> AutoShifted


# Global mappings
[default]
  Hold[F4]        >> launch_hass_light_tiles
  

# Sony WH-1000XM, Ugreen Bluetooth dongle
[device = MediaWH1000XM3]
[device = MediaUgreenBTAudio]
  MediaPlay       >> MediaPlayPause
  MediaPause      >> MediaPlayPause


# Bluetooth camera shutter button (experiment)
[device = MediaShutterButton]
  BTShutterButton = AudioVolumeUp | AudioVolumeDown
  BTShutterButton >> Meta{Tab}


# Barcode reader (experiment)
[device = BarcodeReader]
  0 >> write["0"]
  1 >> write["1"]
  2 >> write["2"]
  3 >> write["3"]
  4 >> write["4"]
  5 >> write["5"]
  6 >> write["6"]
  7 >> write["7"]
  8 >> write["8"]
  9 >> write["9"]

  Enter >> endWrite


# Prevent keyboard auto repeat bug
[device = KeyboardKeychron]
  AutoRepeatTime = 5ms
  Alpha !AutoRepeatTime Alpha >> Alpha


# Key definitions // Keychron K15 Pro
[device = KeyboardK15Pro]
  # Rotary encoder
  EncoderButton = NumpadEnter
  EncoderRight  = NumpadAdd
  EncoderLeft   = NumpadSubtract


# Spotify // Keychron keyboards
[device = KeyboardKeychron, class=/Spotify/i]
  ContextActive   >> context["device = KeyboardKeychron, class = /Spotify/i"]

  FnPlayPause     >> MediaPlayPause
  FnRewind        >> MediaTrackPrevious
  FnFastForward   >> MediaTrackNext
  FnMute          >> AudioVolumeMute
  FnVolumeDown    >> AudioVolumeDown
  FnVolumeUp      >> AudioVolumeUp

# Encoder mappings for Rofi // Keychron K15 Pro
[device = KeyboardK15Pro, title = /rofi/i]
  EncoderButton   >> Enter ^
  EncoderRight    >> ArrowDown
  EncoderLeft     >> ArrowUp


# JetBrains IDE's // Keychron K15 Pro
[device = KeyboardK15Pro, class = JetBrainsIDE]
  # Workaround to use underline shortcuts that conflict with remaps
  (Alt SpaceLeft){Alpha} >> _Alt{Alpha}
  
  # Override i3 keymap to allow easy access to context actions
  (Control SpaceLeft){Enter}  >> !Control SpaceLeft(Enter)
  SpaceLeft{Enter}            >> show_context_actions


# Slack // Keychron keyboards
[device = KeyboardKeychron, class = Slack]
  Escape{K}       >> slack_switch_channel
  Escape{1}       >> slack_goto_workspace1
  Escape{2}       >> slack_goto_workspace2
  Escape{H}       >> slack_goto_home
  Escape{A}       >> slack_goto_activity
  Escape{D}       >> slack_goto_dms
  Escape{T}       >> slack_goto_threads
  Escape{L}       >> slack_goto_later
  Escape{U}       >> slack_goto_unread
  Escape{Space}   >> slack_switch_channel
  Escape{F}       >> find
  Escape{M}       >> toggle_mic_mute
  Combo[Esc, M]   >> toggle_mic_mute


[class = Chromium, title = "YouTube"]
  Esc{Shift{F}} >> Period
  Esc{F}        >> Comma

[class = Chromium, title = "TIDAL"]
  ContextActive >> context["class = Chromium, title = -TIDAL"]

  FnPlayPause   >> Space
  FnFastForward >> Control{ArrowRight}
  FnRewind      >> Control{ArrowLeft}
  FnVolumeUp    >> AudioVolumeUp
  FnVolumeDown  >> AudioVolumeDown
  FnMute        >> AudioVolumeMute


# Browser // Azure DevOps pull request
[device = KeyboardKeychron, class = Chromium, modifier = "!Modifier", title = /Pull request \d+:/i]
  PageUp          >> prev_change
  PageDown        >> next_change
  NavDown         >> prev_change
  NavLeft         >> next_change

  next_change     >> ^ F7
  prev_change     >> ^ Shift{F7}


# Stylus editor // Keychron keyboards
[device = KeyboardKeychron, title = "Stylus - Google Chrome"]
  NavUp                 >> ArrowUp
  NavLeft               >> ArrowLeft
  NavDown               >> ArrowDown
  NavRight              >> ArrowRight


# GitHub Code Spaces // Keychron keyboards
[device = KeyboardKeychron, class = Chromium, title = /Visual Studio Code.*GitHub/i]
  NavUp                 >> ArrowUp
  NavLeft               >> ArrowLeft
  NavDown               >> ArrowDown
  NavRight              >> ArrowRight

  Alt{Any}              >> Alt{Any}
  Control{Any}          >> Control{Any}
  
  Escape{W}             >> close_tab
  Escape{A}             >> command_palette
  Escape{D}             >> goto_definition
  Escape{F}             >> goto_file
  Escape{S}             >> goto_workspace_symbol

  close_tab             >> _ Alt{W}
  command_palette       >> _ Control{Shift{P}}
  goto_definition       >> _ F12
  goto_file             >> _ Control{P}
  goto_workspace_symbol >> _ Control{T}


# Browser // Keychron keyboards
[device = KeyboardKeychron, class = Chromium]
  F11               >> F11              # fullscreen
  F12               >> F12              # DevTools

  Escape{Digit}     >> Alt{Digit}
  Escape{N}         >> new_window
  Escape{T}         >> new_tab
  Escape{W}         >> close_tab
  Escape{G}         >> goto_location
  Escape{Z}         >> suspend_tab
  Escape{B}         >> navigate_back
  Escape{F}         >> navigate_forward
  Escape{R}         >> reload_page
  Escape{Space}     >> apply_completion
  Combo[Esc, Space] >> apply_completion

  Escape{KeyLeft}   >> prev_tab
  Escape{KeyRight}  >> next_tab
  Escape{KeyUp}     >> shift_tab_left
  Escape{KeyDown}   >> shift_tab_right

  NavLeft           >> prev_tab
  NavRight          >> next_tab
  NavUp             >> shift_tab_left
  NavDown           >> shift_tab_right

  apply_completion  >> _ Tab


# Standard keyboard mappings
[device != KeyboardK15Pro]
  ContextActive                >> context["device = KeyboardStandard"]

  # CapsLock{120ms}              >> ControlRight
  # CapsLock !75ms Alpha         >> ControlRight{Alpha}
  # CapsLock                     >> Escape
  # Backquote                    >> i3Scratchpad
  # Space{120ms}                 >> MetaRight

  # Window navigation
  MetaRight{KeyUp}             >> Meta{ArrowUp}
  MetaRight{KeyLeft}           >> Meta{ArrowLeft}
  MetaRight{KeyDown}           >> Meta{ArrowDown}
  MetaRight{KeyRight}          >> Meta{ArrowRight}

  # Mark and goto
  MetaRight{Shift{Quote}}      >> wm_mark_window
  MetaRight{Quote}             >> wm_goto_mark

  MetaRight{Comma}             >> show_emoji_picker
  MetaRight{E}                 >> show_emoji_picker
  MetaRight{Q}                 >> wm_close_window
  MetaRight{BracketLeft}       >> launch_tmux
  MetaRight{Backquote}         >> wm_show_scratchpad
  MetaRight                    >> MetaLeft

  # Editor actions
  AltGr{Equal}                 >> _Shift{Equal}
  AltGr{Minus}                 >> _Shift{Minus}
  AltGr{Backspace}             >> Delete


# Default mappings // Keychron keyboards
[device = KeyboardKeychron]
  Combo[Option, Tab]           >> DirectUmlauts ^
  Combo[Option, ControlRight]  >> AutoShift ^

  # Long-press shortcuts
  Hold[Backslash]              >> launch_tmux
  Hold[Backquote]              >> i3Scratchpad

  Option{Tab}                  >> DirectUmlauts ^
  Option{ControlRight}         >> AutoShift ^
  Option{BracketLeft}          >> set_keyboard_layout_us
  Option{BracketRight}         >> set_keyboard_layout_fi
  Option{1}                    >> set_keyboard_layout_us
  Option{2}                    >> set_keyboard_layout_fi
  Option{Any}                  >>
  Option                       >>

  Command{Space}               >> show_run_menu
  Command{Tab}                 >> show_window_switcher
  Command{Enter}               >> launch_tmux
  Command{O}                   >> launch_obsidian
  Command{U}                   >> launch_openwebui
  Command{S}                   >> launch_slack
  Command{Y}                   >> launch_spotify
  Command{M}                   >> launch_yt_music
  Command{W}                   >> launch_whatsapp
  Command{T}                   >> launch_telegram
  Command{Minus}               >> wm_move_to_scratchpad

  Meta{Control{D}}             >> run_scrpcpy_audiovideo
  Meta{Shift{D}}               >> run_scrpcpy_audio
  Meta{D}                      >> run_scrpcpy_video
  None                         >> run_scrpcpy
  
  # Editor actions
  AltGr{Equal}                 >> _Shift{Equal}
  AltGr{Minus}                 >> _Shift{Minus}
  AltGr{Backspace}             >> Delete

  # Media keys
  Meta{FnPlayPause}            >> MediaPlayPause
  Meta{FnRewind}               >> MediaTrackPrevious
  Meta{FnFastForward}          >> MediaTrackNext
  Meta{FnMute}                 >> AudioVolumeMute
  Meta{FnVolumeDown}           >> AudioVolumeDown
  Meta{FnVolumeUp}             >> AudioVolumeUp

  # Brightness presets (Macro1 -> Option | Command | Lock | Fn)
  Hyper{1}                     >> brightness_preset_1
  Hyper{2}                     >> brightness_preset_2
  Hyper{3}                     >> brightness_preset_3
  Hyper{4}                     >> brightness_preset_4
  Hyper{5}                     >> brightness_preset_5
  Hyper{6}                     >> brightness_preset_6
  
  Hyper{7}                     >> color_temp_preset_1
  Hyper{8}                     >> color_temp_preset_2
  Hyper{9}                     >> color_temp_preset_3
  Hyper{0}                     >> color_temp_preset_4
  
  # Display brightness / color temperature adjustment
  FnBrightnessReset = FnBrightnessDown | FnBrightnessUp
  FnColorTempReset  = FnColorTempDown | FnColorTempUp

  Meta{FnBrightnessDown}       >> ddc_brightness_decrease
  Meta{FnBrightnessUp}         >> ddc_brightness_increase
  Meta{FnColorTempDown}        >> color_temp_decrease
  Meta{FnColorTempUp}          >> color_temp_increase

  CtrlR{FnBrightnessDown}      >> soft_brightness_decrease
  CtrlR{FnBrightnessUp}        >> soft_brightness_increase

  AltGr{FnBrightnessReset}     >> brightness_reset
  AltGr{FnColorTempReset}      >> color_temp_reset


# Default mappings // Keychron K13 Pro
[device = KeyboardK3Pro]
  ContextActive                       >> context["device = KeyboardK3Pro"]

  Backquote{120ms}                    >> i3Scratchpad
  Backquote                           >> Backquote

  Space{120ms}                        >> MetaRight

  Space{E}                            >> show_emoji_picker
  Space{Q}                            >> wm_close_window
  Space{BracketLeft}                  >> launch_tmux
  Space{Backquote}                    >> wm_show_scratchpad

  # Passtrough modifier after mappings
  AltGr                               >> AltGr

  Command{i3LeaderBind}               >> i3Leader{i3LeaderBind}
  Command                             >> i3Leader


# Default mappings // Keychron K15 Pro
[device = KeyboardK15Pro]
  ContextActive                       >> context["device = KeyboardK15Pro"]

  # QMK Macro1+Backquote
  RofiHassScene                       >> show_scene_picker   

  Command{Lock}                       >> lock_desktop_session
  Command{i3LeaderBind}               >> i3Leader{i3LeaderBind}
  Command                             >> i3Leader

  # Encoder brigthness and color temperature control
  ControlShiftRight = (ControlRight ShiftRight)

  ControlShiftRight{EncoderButton}    >> color_temp_reset
  ControlShiftRight{EncoderRight}     >> color_temp_increase
  ControlShiftRight{EncoderLeft}      >> color_temp_decrease

  ControlRight{EncoderButton}         >> soft_brightness_reset
  ControlRight{EncoderRight}          >> soft_brightness_increase
  ControlRight{EncoderLeft}           >> soft_brightness_decrease

  # Encoder media control
  AltGr{EncoderButton}                >> !AltGr MediaStop ^
  AltGr{EncoderRight}                 >> !AltGr MediaTrackNext
  AltGr{EncoderLeft}                  >> !AltGr MediaTrackPrevious

  # Encoder audio control
  EncoderButton                       >> MediaPlayPause ^
  EncoderRight                        >> AudioVolumeUp
  EncoderLeft                         >> AudioVolumeDown

  # Directional tiled window movement
  (SpaceLeft Shift){KeyUp}            >> Meta{Shift{ArrowUp}}
  (SpaceLeft Shift){KeyLeft}          >> Meta{Shift{ArrowLeft}}
  (SpaceLeft Shift){KeyDown}          >> Meta{Shift{ArrowDown}}
  (SpaceLeft Shift){KeyRight}         >> Meta{Shift{ArrowRight}}

  # Disable work related mappings for vacation
  SpaceLeft{S}                        >> 
  SpaceLeft{G}                        >> launch_telegram
  
  # i3 shortcuts used with MetaLeft
  SpaceLeft{Minus}                    >> Meta{Minus}
  SpaceLeft{i3ModBind}                >> Meta{i3ModBind}

  # Window navigation
  SpaceLeft{KeyUp}                    >> Meta{ArrowUp}
  SpaceLeft{KeyLeft}                  >> Meta{ArrowLeft}
  SpaceLeft{KeyDown}                  >> Meta{ArrowDown}
  SpaceLeft{KeyRight}                 >> Meta{ArrowRight}

  # Mark and goto
  # SpaceLeft{Quote}                    >> wm_mark_window
  # Quote{120ms}                        >> wm_goto_mark
  None                                >> wm_mark_window
  None                                >> wm_goto_mark

  SpaceLeft{Comma}                    >> show_emoji_picker
  SpaceLeft{E}                        >> show_emoji_picker
  SpaceLeft{Q}                        >> wm_close_window
  SpaceLeft{BracketLeft}              >> launch_tmux
  SpaceLeft{Backquote}                >> wm_show_scratchpad
  SpaceLeft{U}                        >> launch_openwebui

  MetaRight                           >> MetaLeft


# Apayado K33 Numpad
[modifier = "NumpadNavMode NumpadRofiMode"]
  ArrowLeft       >> Escape NumpadRofiMode
  ArrowRight      >> Shift{Delete} NumpadRofiMode
  NavigationKey   >> NavigationKey
  Delete          >> Delete
  Backspace       >> Shift{Delete} NumpadRofiMode
  Enter           >> Enter NumpadRofiMode
  Escape          >> Escape NumpadRofiMode

[device = NumpadApayado, class = "gnome-calculator"]
  # ContextActive >> context["device = NumpadApayado, class = gnome-calculator"]

  NumLock       >> wm_close_window
  ScrollLock    >> wm_close_window

[device = NumpadApayado, modifier = "NumpadNavMode", class != "gnome-calculator"]
  # ContextActive >> context["device = NumpadApayado, modifier = NumpadNavMode"]

  Numpad0       >> Meta{0}
  Numpad1       >> Meta{1}
  Numpad2       >> Meta{2}
  Numpad3       >> Meta{3}
  Numpad4       >> Meta{4}
  Numpad5       >> Meta{5}
  Numpad6       >> Meta{6}
  Numpad7       >> Meta{7}
  Numpad8       >> Meta{8}
  Numpad9       >> Meta{9}
  NumpadDecimal >> Meta{M}
  NumpadAdd     >> Meta{Equal}
  NumpadEnter   >> Meta{P}
  Home          >> Meta{BracketLeft}
  End           >> Meta{G}
  Insert        >> Meta{O}
  Delete        >> Meta{S}
  PageUp        >> $(i3-msg "scratchpad show scratchpad show")
  PageDown      >> $(i3-msg "scratchpad show")

  ArrowUp       >> Escape NumpadRofiMode Meta{N}
  ArrowDown     >> Meta{N} ^ Escape

  ArrowLeft     >> Meta{Shift{Tab}}
  ArrowRight    >> Meta{Tab}

[device = NumpadApayado]
  # ContextActive >> context["device = NumpadApayado"]
  
  NumpadSymbol  >> NumpadSymbol
  NumpadDigit   >> NumpadDigit
  ScrollLock    >> NumpadNavMode
  NumLock       >> launch_calculator


# Mouse buttons // Logitech G502 X
[device = MouseG502X]
  # ContextActive             >> context['device = MouseG502X']

  DoubleTap[ButtonSide]     >> wm_float_window
  Hold[ButtonMiddle]        >> wm_sticky_toggle

  ButtonForward{150ms}      >> mouse_drag
  ButtonBack{150ms}         >> mouse_drag_resize


[device = MouseG502X, modifier = "ButtonSide"]
  # ContextActive             >> context['device = MouseG502X, modifier = "ButtonSide"']

  DoubleTap[ButtonLeft]     >> wm_resize_window
  DoubleTap[ButtonRight]    >> wm_close_window

  ButtonLeft                >> wm_center_window
  ButtonRight               >> wm_resize_window_wide
  ButtonMiddle              >> wm_float_window
  WheelUp                   >> zoom_out
  WheelDown                 >> zoom_in


# Mouse buttons // Logitech MX Anywhere 2S
[device = MouseMXAnywhere]
  ButtonMiddle{150ms}       >> wm_float_window


# Mouse scroll lock // Logitech Trackball (note, this affects all pointer devices)
[modifier = MouseScrollLock]
  # ContextActive             >> context["modifier = MouseScrollLock"]
  MouseButton               >> MouseScrollLock

[default]
  MouseScrollLock           >> ButtonMiddle


# Mouse Buttons // Logitech Trackball
[device = MouseTrackball]
  # ContextActive             >> context["device = MouseTrackball"]

  DoubleTap[ButtonLeft]     >> ButtonBack
  DoubleTap[ButtonRight]    >> ButtonForward
  
 (ButtonLeft ButtonRight)   >> MouseScrollLock
  
  ButtonLeft                >> ButtonRight
  ButtonRight               >> ButtonLeft
  ButtonForward             >> ButtonMiddle


# Mouse buttons // All mice
[device = Mouse]
  # ContextActive             >> context["device = Mouse"]

  Meta{ButtonLeft}          >> wm_float_window
  Meta{ButtonRight}         >> wm_move_to_scratchpad
  Meta{ButtonMiddle}        >> wm_close_window


# Terminal // Tmux
[class = "tmux"]
[class = Terminal, title = tmux]
  ContextActive             >> context["class = Terminal, title = tmux"]

  TmuxMod     = Tab
  TmuxPrefix  = (Control A)
  TmuxBinding = Direction | Digit | C | N | P | O | W | Z | Backslash | BracketLeft | BracketRight | Comma | Minus | Period | Semicolon | Slash 

  TmuxCommand = TmuxPrefix{10ms} 10ms $0

  TmuxMod{TmuxBinding}      >> TmuxCommand[TmuxBinding]
  

# Terminal // Default mappings
[class = Terminal]
  ContextActive             >> context["class = Terminal"]

  NavUp                     >> ArrowUp
  NavLeft                   >> ArrowLeft
  NavDown                   >> ArrowDown
  NavRight                  >> ArrowRight

  # Copy/paste
  Copy                      >> Control{Shift{C}}
  Paste                     >> Control{Shift{V}}
  
  AltBound = Alpha | Digit | Symbol | Space 

  # Esc as Alt/Meta
  Escape !120ms AltBound    >> !Escape Alt{AltBound} log["> Escape !120ms * >> Alt{*}"]
  Escape >> Escape
  
  zoom_out                  >> _ Control{Shift{Minus}}
  zoom_in                   >> _ Control{Shift{Equal}}


# JetBrains IDE // Diff view
[class = JetBrainsIDE, modifier = "!AnyControl !Alt !AltGr", title = /Repository Diff/i]
  ContextActive             >> context["class = JetBrainsIDE, modifier = \"!AnyControl !Alt !AltGr\", title = /Repository Diff/i"]

  J                         >> next_difference
  K                         >> prev_difference
  N                         >> compare_next_file
  B                         >> compare_prev_file
  D                         >> goto_declaration
  DoubleTap[Escape]         >> Escape
  Escape                    >>

# JetBrains IDE // Pull request, commit or stash diff view
[class = JetBrainsIDE, title = /Diff for Pull Request |Commit: |Shelved: |History: |Changes: /i]
  ContextActive             >> context["class = JetBrainsIDE, title = /Diff for Pull Request |Commit: |Shelved: |History: |Changes: /i"]

  NavLeft                   >> next_difference
  NavDown                   >> prev_difference
  Forward                   >> compare_next_file
  Back                      >> compare_prev_file
  Control{J}                >> next_difference
  Control{K}                >> prev_difference
  Control{N}                >> compare_next_file
  Control{P}                >> compare_prev_file
  DoubleTap[Escape]         >> Escape
  Escape                    >>

# JetBrains IDE // VCS changes
[class = JetBrainsIDE, modifier = "!AltGr", title = /Commit Changes|Commit: /i]
  ContextActive             >> context["class = JetBrainsIDE, modifier = \"!AltGr\", title=/Settings|Commit Changes|Commit: /i"]

  Control{J}                >> next_difference
  Control{K}                >> prev_difference
  Control{N}                >> compare_next_file
  Control{Shift{N}}         >> compare_prev_file

# JetBrains IDE // Keychron K15 Pro mappings
[class = JetBrainsIDE, device = KeyboardKeychron]
  ContextActive             >> context["class = JetBrainsIDE, device = KeyboardKeychron, keymaps"]
  
  Shift{Find}               >> replace_in_files
  Find                      >> find_in_files
  Help                      >> show_hover_info
  Exec                      >> prefix_git_action
  Erase                     >> rollback_change
  AltGr{Shift{Delete}}      >> cut_to_line_end
  AltGr{Delete}             >> delete_to_line_end

# JetBrains IDE // Default mappings
[class = JetBrainsIDE]
  ContextActive             >> context["class = JetBrainsIDE, keymaps"]

  # Use numpad as arrow keys
  NavUp                     >> ArrowUp
  NavLeft                   >> ArrowLeft
  NavDown                   >> ArrowDown
  NavRight                  >> ArrowRight

  # Tool window shortcuts
  Hold[Digit]               >> Alt{Digit} ^

  # Function key shortcuts
  Hold[FunctionKey]         >> Control{FunctionKey} ^

  # TODO: What was this for?
  # (Control Alt){Any}        >> (Control Alt){Any}

  Combo[Esc, Direction]     >> (Control AltGr){Direction}
  Escape{Direction}         >> !Escape (Control AltGr){Direction}

  # TODO: Replace with something else, this collides with IdeaVim undo
  # TabFocus = U | O

  # Combo[Esc, TabFocus]      >> (Control AltGr){TabFocus}
  # Escape{TabFocus}          >> (Control AltGr){TabFocus}

  Alt{Direction}            >> (Alt AltGr){Direction}
  # ControlRight{Direction}   >> (Control AltGr){Direction}

  ControlRight{KeyLeft}     >> Control{ArrowLeft}
  ControlRight{KeyRight}    >> Control{ArrowRight}
  # ControlRight{KeyUp}       >> Control{ArrowUp}
  # ControlRight{KeyDown}     >> Control{ArrowDown}
  
  Combo[Esc, Shift{Slash}]  >> toggle_block_comment
  Combo[Esc, Slash]         >> toggle_comment

  _Shift{Escape}            >> close_tool_window
  BrowserBack               >> navigate_back
  BrowserForward            >> navigate_forward

  Control{BracketLeft}      >> Control{BracketLeft}  # move caret to previous paragraph
  Control{BracketRight}     >> Control{BracketRight} # move caret to next paragraph

  # TODO: Currently overrides KJump
  Combo[Esc, Space]         >> accept_completion
  Escape{Space}             >> accept_completion

  KJump   = Combo[Escape, Space]
  JTarget = W | J | F | G | L | C | Space | Comma | Enter

  KJump                     >> Control{Comma}
  # KJump Shift{JTarget}      >> Control{Comma} Shift{JTarget}
  # KJump JTarget             >> Control{Comma} JTarget

  # Escape{Space} Shift{JTarget}     >> Control{Comma} Shift{JTarget}
  # Escape{Space} JTarget     >> Control{Comma} JTarget

  Esc{G} T                  >> jump_to_top
  Esc{G} B                  >> jump_to_bottom
  Esc{G} I                  >> jump_to_text_start
  Esc{G} K                  >> jump_to_text_end
  Esc{G} L                  >> jump_to_line
  Esc{G} W                  >> jump_to_word
  Esc{G} C                  >> jump_to_character

  Esc{G} P                  >> toggle_problems
  Escape{T}                 >> toggle_terminal

  Escape{F}                 >> find
  Escape{R}                 >> replace
  Escape{W}                 >> close_tab
  None                      >> join_lines

  Escape{A}                 >> show_actions
  Escape{Q}                 >> show_quick_documentation
  F1                        >> show_hover_info

  Escape{D}                 >> goto_declaration
  Escape{Y}                 >> goto_type_declaration
  Escape{B}                 >> goto_implementation
  Escape{P}                 >> goto_file
  Escape{S}                 >> goto_symbol

  Escape{5}                 >> jump_to_matching_brace
  Escape{Quote}             >> jump_to_last_edit_loc

  Escape{N}                 >> next_difference
  Escape{E}                 >> next_error

  Escape{Z}                 >> rollback_change
  Escape                    >> Escape

  BracketLeft{BracketRight} >> BracketLeft BracketRight

  BracketLeft{100ms}        >>
  BracketLeft{E}            >> prev_error
  BracketLeft{C}            >> prev_change
  BracketLeft{F}            >> prev_function
  BracketLeft{Any}          >>

  BracketRight{100ms}       >>
  BracketRight{E}           >> next_error
  BracketRight{C}           >> next_change
  BracketRight{F}           >> next_function
  BracketRight{Any}         >>

  AltGr{Enter}              >> extend_selection
  (Shift AltGr){Enter}      >> shrink_selection


# JetBrainsIDE // IDE actions
[class = JetBrainsIDE]
  ContextActive             >> context["class = JetBrainsIDE, actions"]

  prefix_git_action         >> _Alt{G}

  close_tab                 >> Alt{W}
  close_tool_window         >> Shift{Escape}

  find                      >> Control{F}
  find_in_files             >> (Control Shift){F}
  replace                   >> Control{R}
  replace_in_files          >> (Control Shift){R}

  show_actions              >> _Alt{A}
  show_context_actions      >> _Alt{Enter}
  show_hover_info           >> Control{F1}
  show_quick_documentation  >> Control{Q}

  toggle_terminal           >> ^ Alt{T}
  toggle_problems           >> ^ Alt{8}

  goto_file                 >> Alt{P}
  goto_symbol               >> Alt{S}

  goto_declaration          >> Control{B}
  goto_type_declaration     >> (Control Shift){B}
  goto_implementation       >> Control{Alt{B}}

  jump_to_text_start        >> Control{Home}
  jump_to_text_end          >> Control{End}
  jump_to_top               >> Control{PageUp}
  jump_to_bottom            >> Control{PageDown}
  jump_to_line              >> Control{G}
  jump_to_character         >> Alt{Comma}
  jump_to_word              >> Control{Comma}
  jump_to_matching_brace    >> Control{Shift{M}}
  jump_to_last_edit_loc     >> Alt{Shift{E}}

  next_error                >> !Escape _Alt{Escape}
  prev_error                >> !Escape _Alt{Shift{Escape}}

  next_function             >> _Alt{ArrowDown}
  prev_function             >> _Alt{ArrowUp}

  rollback_change           >> (Control Alt){Z}
  next_change               >> (Control Alt){ArrowDown}
  prev_change               >> (Control Alt){ArrowUp}
  next_difference           >> (Control Alt){ArrowDown}
  prev_difference           >> (Control Alt){ArrowUp}
  compare_next_file         >> (Alt Shift){N}
  compare_prev_file         >> (Alt Shift){J}

  extend_selection          >> _Alt{W}
  shrink_selection          >> _Alt{Shift{W}}

  cut_to_line_end           >> !AltGr (Shift Control Alt){Delete}
  delete_to_line_end        >> !AltGr (Control Alt){Delete}
  join_lines                >> _Control{J}
  toggle_comment            >> !Escape _Control{7}
  toggle_block_comment      >> !Escape _Control{Shift{7}}
  accept_completion         >> ^ Tab


# Visual Studio Code
[class = VSCode]
  # Use numpad as arrow keys
  NavUp                     >> ArrowUp
  NavLeft                   >> ArrowLeft
  NavDown                   >> ArrowDown
  NavRight                  >> ArrowRight

  Escape{P}                 >> ^ Control{P}
  Escape{S}                 >> goto_workspace_symbol
  Escape{W}                 >> close_tab
  Escape{T}                 >> toggle_terminal
  Escape{E}                 >> next_error
  (Control Alt){Any}        >> (Control Alt){Any}
  (Shift AltGr){Enter}      >> shrink_selection
  AltGr{Enter}              >> expand_selection
  (Shift Alt){W}            >> shrink_selection
  Alt{W}                    >> expand_selection
  Alt{S}                    >> goto_workspace_symbol
  Alt{Any}                  >> Alt{Any}
  Alt                       >>

  Escape !250ms Any         >> Control{K} Any

  BracketRight{100ms}       >>
  BracketRight{E}           >> next_error
  BracketRight{Any}         >>

  BracketLeft{100ms}        >>
  BracketLeft{E}            >> prev_error
  BracketLeft{Any}          >>

  goto_workspace_symbol     >> _Control{T}
  next_error                >> _Alt{F8}
  prev_error                >> _Alt{Shift{F8}}
  toggle_terminal           >> _Alt{T}
  expand_selection          >> _Alt{Shift{ArrowRight}}
  shrink_selection          >> _Alt{Shift{ArrowLeft}}


# Obsidian
[class = Obsidian]
  ContextActive             >> context["class = Obsidian"]

  AltRight{Any}             >> (ControlLeft Alt ShiftLeft){Any}
  Escape{Direction}         >> _Alt{Direction}
  Escape{A}                 >> command_palette
  Escape{N}                 >> new_note
  Escape{T}                 >> new_tab
  Escape{W}                 >> close_tab
  Escape{P}                 >> quick_switcher
  Escape{Comma}             >> toggle_left_sidebar
  Escape{Period}            >> toggle_right_sidebar
  Escape                    >> Escape

  new_note                  >> _ Control{N}
  quick_switcher            >> _ Control{O}
  command_palette           >> _ Alt{A}
  toggle_left_sidebar       >> _ Alt{Comma}
  toggle_right_sidebar      >> _ Alt{Period}


# Teams for Linux
[class = TeamsForLinux]
  ContextActive            >> context["class = TeamsForLinux"]
  
  AltOrEsc = Alt | AltRight | Escape
  AppMod   = !Meta !Control AltOrEsc

  Escape{M}                 >> toggle_mic_mute
  Escape{H}                 >> toggle_raised_hand
  Escape{L}                 >> leave_call
  Combo[Esc, M]             >> toggle_mic_mute
  Combo[Esc, H]             >> toggle_raised_hand
  Combo[Esc, L]             >> leave_call
  AltGr{M}                  >> toggle_mic_mute
  AltGr{H}                  >> toggle_raised_hand
  AltGr{L}                  >> leave_call

  toggle_mic_mute           >> ^ _Control{Shift{M}}
  toggle_raised_hand        >> ^ _Control{Shift{K}}
  leave_call                >> ^ _Control{Shift{H}}


# Chrome/Chromium defaults
[class = Chromium]
  ContextActive             >> context["class = Chromium"]

  # Mouse wheel zoom from either Control
  ControlRight              >> ControlLeft

  AnyAlt{N}                 >> new_window
  AnyAlt{T}                 >> new_tab
  AnyAlt{W}                 >> close_tab

  AltGr{R}                  >> reload_page
  AltGr{P}                  >> pin_tab
  AltGr{Z}                  >> suspend_tab
  AltGr{S}                  >> suspend_tab_pause

  Alt{Shift{KeyLeft}}       >> shift_tab_left
  Alt{Shift{KeyRight}}      >> shift_tab_right

  Alt{KeyLeft}              >> prev_tab
  Alt{KeyRight}             >> next_tab
  Alt{KeyUp}                >> scroll_up
  Alt{KeyDown}              >> scroll_down

  Hold[Equal]               >> zoom_in
  Hold[Minus]               >> zoom_out

  goto_location             >> _ Control{L}
  shift_tab_left            >> _ Control{Shift{PageUp}}
  shift_tab_right           >> _ Control{Shift{PageDown}}
  pin_tab                   >> _ Alt{P}
  reload_page               >> _ Control{R}
  scroll_up                 >> _ Repeat6x[ArrowUp]
  scroll_down               >> _ Repeat6x[ArrowDown]
  # scroll_up                 >> !Alt WheelUp
  # scroll_down               >> !Alt WheelDown
  suspend_tab               >> _ Alt{Z}
  suspend_tab_pause         >> _ Alt{Shift{Z}}


# Slack
[class = Slack]
  Hold[1]                   >> slack_goto_workspace1
  Hold[2]                   >> slack_goto_workspace2

  AnyAlt{Space}             >> slack_switch_channel
  Alt{1}                    >> slack_goto_workspace1
  Alt{2}                    >> slack_goto_workspace2

  AnyAlt{M}                 >> toggle_mic_mute

  Alt{Tab}                  >> slack_next_section
  Alt{Shift{Tab}}           >> slack_prev_section
  Alt{KeyUp}                >> slack_prev_chat
  Alt{KeyDown}              >> slack_next_chat

  Alt{KeyLeft}              >> navigate_back
  Alt{KeyRight}             >> navigate_forward

  slack_goto_home           >> (Control Shift){1}
  slack_goto_dms            >> (Control Shift){2}
  slack_goto_activity       >> (Control Shift){3}
  slack_goto_later          >> (Control Shift){4}
  slack_goto_threads        >> (Control Shift){T}
  slack_goto_unread         >> (Control Shift){A}
  slack_switch_channel      >> Control{K}
  slack_next_chat           >> Alt{ArrowDown}
  slack_prev_chat           >> Alt{ArrowUp}
  slack_goto_workspace1     >> Control{1}
  slack_goto_workspace2     >> Control{2}
  slack_next_section        >> F6
  slack_prev_section        >> Shift{F6}
  toggle_mic_mute           >> (Control Shift){Space}


# scrcpy
[class = "scrcpy"]
  Meta{D}                   >> $(pkill -x scrcpy)


# TODO: Possible bug, this is intended for the default section
[class = Obsidian]
[class = Chromium]
  zoom_in                   >> _ Control{Equal}
  zoom_out                  >> _ Control{Minus}


# Nordic layout mappings
[modifier = "!Meta !Control !Alt"]
  Shift{2}                  >> Shift{Quote} # '"'
  AltGr{Adiaeresis}         >> AltGr{Q}     # 'ä'
  AltGr{Odiaeresis}         >> AltGr{P}     # 'ö'
  AltGr{P}                  >> AltGr{W}     # 'å'
  AltGr{E}                  >> AltGr{5}     # '€'
  AltGr{2}                  >> _ Shift{2}   # '@'
  AltGr{BracketLeft}        >> _ Shift{9}   # '('
  AltGr{BracketRight}       >> _ Shift{0}   # ')'


# Default abstract commands
[default]
  # Unmapped commands
  None                      >> ddc_brightness_reset 

  # Abstract commands
  Cut                       >> edit_cut
  Copy                      >> edit_copy
  Paste                     >> edit_paste
  Undo                      >> edit_undo
  Again                     >> edit_redo

  edit_copy                 >> _Control{C}
  edit_paste                >> _Control{V}
  edit_cut                  >> _Control{X}
  edit_undo                 >> _Control{Z}
  edit_redo                 >> _Control{Y}

  find                      >> _Control{F}
  new_window                >> _Control{N}
  new_tab                   >> _Control{T}
  close_tab                 >> _Control{W}
  prev_tab                  >> _Control{PageUp}
  next_tab                  >> _Control{PageDown}
  navigate_back             >> _Alt{ArrowLeft}
  navigate_forward          >> _Alt{ArrowRight}

  show_emoji_picker         >> $(rofimoji --skin-tone neutral --prompt emoji --keybinding-copy Control-c) ^
  show_scene_picker         >> $(~/.config/regolith/rofi/rofi-hass-scene.sh) ^
  show_window_switcher      >> $(rofi -show window) ^
  show_run_menu             >> $(rofi -normal-window -show run) ^

  setDdcBrightness          = $(i3-msg "exec ddcutil setvcp 10 $0")
  setSoftBrightness         = $(redshiftctl brightness $0)
  setColorTemp              = $(redshiftctl temperature $0)
  
  ddcBrightnessReset        = $(i3-msg "exec ddcutil setvcp 10 25")
  softBrightnessReset       = $(redshiftctl brightness = && redshiftctl temperature =)
  softColorTempReset        = $(redshiftctl temperature =)

  ddc_brightness_decrease   >> $(i3-msg "exec ddcutil setvcp 10 - 2")
  ddc_brightness_increase   >> $(i3-msg "exec ddcutil setvcp 10 + 2")
  ddc_brightness_reset      >> ddcBrightnessReset

  soft_brightness_decrease  >> $(redshiftctl brightness -)
  soft_brightness_increase  >> $(redshiftctl brightness +)
  soft_brightness_reset     >> softBrightnessReset ^

  brightness_reset          >> softBrightnessReset setDdcBrightness[22]
  
  brightness_preset_1       >> softBrightnessReset setDdcBrightness[36]
  brightness_preset_2       >> softBrightnessReset setDdcBrightness[22]
  brightness_preset_3       >> softBrightnessReset setDdcBrightness[14]
  brightness_preset_4       >> softBrightnessReset setDdcBrightness[8]
  brightness_preset_5       >> softBrightnessReset setDdcBrightness[4]
  brightness_preset_6       >> softBrightnessReset setDdcBrightness[0]
  
  color_temp_preset_1       >> setColorTemp[6500]
  color_temp_preset_2       >> setColorTemp[6000]
  color_temp_preset_3       >> setColorTemp[5000]
  color_temp_preset_4       >> setColorTemp[3500]

  color_temp_decrease       >> $(redshiftctl temperature -)
  color_temp_increase       >> $(redshiftctl temperature +)
  color_temp_reset          >> $(redshiftctl temperature =) ^

  mouse_drag                >> (AltLeft ButtonLeft)
  mouse_drag_resize         >> (AltLeft ButtonRight)

  launch_calculator         >> $(i3-open -c gnome-calculator "gnome-calculator") ^
  launch_obsidian           >> $(i3-open -s -c obsidian "xdg-open obsidian://") ^
  launch_slack              >> # $(i3-open -s -c Slack "gtk-launch slack-readable") ^
  launch_spotify            >> $(i3-open -s -c Spotify "exec spotify") ^
  launch_tmux               >> $(i3-open -s -c tmux "kitty --single-instance --class tmux tmux-session scratch") ^
  launch_yt_music           >> $(i3-open -i music.youtube.com "gtk-launch youtube-music") ^
  launch_hass_light_tiles   >> $(i3-open -t "^Lights " "gtk-launch home-assistant-lights") ^

  launch_openwebui          >> $(i3-open -s -c "Io.github.ungoogled_software.ungoogled_chromium" -t "^Open WebUI" gtk-launch $(basename $(rg -l "Open WebUI" ~/.local/share/applications)))
  launch_telegram           >> $(i3-open -s -c Telegram gtk-launch $(basename $(rg -l Telegram ~/.local/share/applications)))
  launch_whatsapp           >> $(i3-open -t WhatsApp gtk-launch $(basename $(rg -l WhatsApp ~/.local/share/applications)))

  run_scrpcpy_audiovideo    >> $(pkill -x scrcpy; scrcpy -KM --legacy-paste)
  run_scrpcpy_audio         >> $(pkill -x scrcpy; scrcpy -KM --no-video --window-height=600 --stay-awake --legacy-paste)
  run_scrpcpy_video         >> $(i3-open -s -c scrcpy "scrcpy --keyboard=aoa --mouse=sdk --no-audio-playback --no-audio  --stay-awake --legacy-paste --window-width=602")
  run_scrpcpy               >> $(pkill -x scrcpy; scrcpy -KM --no-video --no-audio --window-height=600 --stay-awake --legacy-paste)
  
  wm_resize_window          >> event["resize set"]       $(i3-msg "resize set 1100px 1250px") ^
  wm_resize_window_wide     >> event["resize set"]       $(i3-msg "resize set 1800px 1250px") ^
  wm_center_window          >> event["position center"]  $(i3-msg "move absolute position center") ^
  wm_show_scratchpad        >> event["scratch show"]     $(i3-msg "scratchpad show") ^
  wm_close_window           >> event["kill focused"]     $(i3-msg '[con_id="__focused__"] kill') ^
  wm_float_window           >> event["floating toggle"]  $(i3-msg "floating toggle") ^
  wm_sticky_toggle          >> event["sticky toggle"]    $(i3-msg "sticky toggle") ^
  wm_move_to_scratchpad     >> event["move to scratch"]  $(i3-msg "move to scratchpad") ^

  wm_mark_window            >> $(i3-input -F "mark %s" -l 1 -P "Mark: ") ^
  wm_goto_mark              >> $(i3-input -F '[con_mark="^%s"] focus' -l 1 -P "Goto: ") ^

  set_keyboard_layout_fi    >> $(gsettings set org.gnome.desktop.input-sources current GnomeInputSourceFI)
  set_keyboard_layout_us    >> $(gsettings set org.gnome.desktop.input-sources current GnomeInputSourceUS)

  lock_desktop_session      >> $(dbus-send --type=method_call --dest=org.gnome.ScreenSaver "/org/gnome/ScreenSaver" "org.gnome.ScreenSaver.Lock") ^

# vim: ft=perl sw=2 ts=2 sts=2 expandtab foldmethod=indent
